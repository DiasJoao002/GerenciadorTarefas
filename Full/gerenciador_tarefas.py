# Importa√ß√£o de bibliotecas necess√°rias
import os  # Para verificar a exist√™ncia do arquivo
import json  # Para salvar as tarefas em formato estruturado
from datetime import datetime

# Nome do arquivo onde as tarefas ser√£o armazenadas
arquivo_tarefas = "tarefas.json"

# Dicion√°rio que mapeia n√≠veis de prioridade a n√∫meros para ordena√ß√£o
prioridades = {
    "Alta": 3,
    "M√©dia": 2,
    "Baixa": 1
}

# Tupla com op√ß√µes v√°lidas de prioridade
opcoes_prioridade = ("Alta", "M√©dia", "Baixa")


def carregar_tarefas():
    """Carrega as tarefas salvas no arquivo JSON."""
    if not os.path.exists(arquivo_tarefas):
        return []
    with open(arquivo_tarefas, "r", encoding="utf-8") as file:
        return json.load(file)


def salvar_tarefas(tarefas):
    """Salva a lista de tarefas no arquivo JSON."""
    with open(arquivo_tarefas, "w", encoding="utf-8") as file:
        json.dump(tarefas, file, indent=4, ensure_ascii=False)


def obter_duracao_tarefa():
    """Solicita ao usu√°rio a dura√ß√£o da tarefa no formato hh:mm."""
    while True:
        duracao = input("Insira a dura√ß√£o da tarefa (hh:mm): ")
        try:
            horas, minutos = map(int, duracao.split(':'))
            if minutos < 0 or minutos > 59:
                raise ValueError
            return horas, minutos
        except ValueError:
            print("‚ö†Ô∏è Formato inv√°lido. Insira a dura√ß√£o no formato hh:mm (ex: 01:30).")


def validar_data():
    """Solicita uma data ao usu√°rio e valida se √© futura e no formato correto."""
    while True:
        data_inserida = input("Data de conclus√£o (dd/mm/yyyy): ")
        try:
            data_formatada = datetime.strptime(data_inserida, "%d/%m/%Y")
            if data_formatada < datetime.now():
                print("üö´ Data inv√°lida. Insira uma data futura.")
            else:
                return data_inserida
        except ValueError:
            print("‚ö†Ô∏è Formato inv√°lido. Insira a data no formato dd/mm/yyyy.")


def adicionar_tarefa():
    """Permite que o usu√°rio adicione uma nova tarefa."""
    descricao = input("Digite a nova tarefa: ")

    horas, minutos = obter_duracao_tarefa()
    duracao_total = horas * 60 + minutos

    while True:
        prioridade = input("Defina a prioridade (Alta, M√©dia, Baixa): ").capitalize()
        if prioridade in opcoes_prioridade:
            break
        print("‚ö†Ô∏è Prioridade inv√°lida. Escolha entre: Alta, M√©dia ou Baixa.")

    data_conclusao = validar_data()

    tarefas = carregar_tarefas()
    nova_tarefa = {
        "descricao": descricao,
        "tempo_estimado": duracao_total,
        "prioridade": prioridade,
        "data_conclusao": data_conclusao
    }

    tarefas.append(nova_tarefa)
    salvar_tarefas(tarefas)
    print("‚úÖ Tarefa adicionada com sucesso!")
    print(f'Descri√ß√£o: {descricao} || Dura√ß√£o: {duracao_total} min || Prioridade: {prioridade} || Data: {data_conclusao}')


def listar_tarefas_prioridade():
    """Lista todas as tarefas ordenadas por prioridade."""
    tarefas = carregar_tarefas()
    if not tarefas:
        print("üìÇ Nenhuma tarefa encontrada.")
        return

    tarefas_ordenadas = sorted(tarefas, key=lambda x: prioridades[x["prioridade"]], reverse=True)
    
    print("\nüìå Lista de Tarefas (Ordenadas por Prioridade):")
    for i, tarefa in enumerate(tarefas_ordenadas, 1):
        horas, minutos = divmod(tarefa['tempo_estimado'], 60)
        print(f"{i}. {tarefa['descricao']} - üïí {horas}h {minutos}m - üî• {tarefa['prioridade']}")


def listar_tarefas_date():
    """Lista todas as tarefas ordenadas por data de conclus√£o."""
    tarefas = carregar_tarefas()
    if not tarefas:
        print("üìÇ Nenhuma tarefa encontrada.")
        return

    tarefas_ordenadas = sorted(tarefas, key=lambda x: datetime.strptime(x["data_conclusao"], "%d/%m/%Y"))
    
    print("\nüìå Lista de Tarefas (Ordenadas por Data):")
    for i, tarefa in enumerate(tarefas_ordenadas, 1):
        horas, minutos = divmod(tarefa['tempo_estimado'], 60)
        print(f"{i}. {tarefa['descricao']} - üïí {horas}h {minutos}m - üìÖ {tarefa['data_conclusao']}")


def remover_tarefa():
    """Permite que o usu√°rio remova uma tarefa pelo n√∫mero correspondente."""
    tarefas = carregar_tarefas()
    listar_tarefas_prioridade()

    if not tarefas:
        return

    while True:
        try:
            num_tarefa = int(input("\nDigite o n√∫mero da tarefa a remover: "))
            if 1 <= num_tarefa <= len(tarefas):
                tarefa_removida = tarefas.pop(num_tarefa - 1)
                salvar_tarefas(tarefas)
                print(f"üóëÔ∏è Tarefa {tarefa_removida['descricao']} removida com sucesso!")
                break
            else:
                print("‚ùå N√∫mero inv√°lido. Tente novamente.")
        except ValueError:
            print("‚ö†Ô∏è Entrada inv√°lida. Digite um n√∫mero v√°lido.")


def visualizar_estatisticas():
    """Exibe estat√≠sticas sobre as tarefas cadastradas."""
    tarefas = carregar_tarefas()
    if not tarefas:
        print("üìä Nenhuma estat√≠stica dispon√≠vel.")
        return

    total_tarefas = len(tarefas)
    tempo_total = sum(tarefa["tempo_estimado"] for tarefa in tarefas)
    prioridades_unicas = set(tarefa["prioridade"] for tarefa in tarefas)

    print("\nüìä Estat√≠sticas das Tarefas:")
    print(f"üìå Total de tarefas: {total_tarefas}")
    print(f"üïí Tempo total estimado: {tempo_total // 60}h {tempo_total % 60}m")
    print(f"üî• Prioridades presentes: {', '.join(prioridades_unicas)}")


def menu():
    """Exibe um menu interativo para o usu√°rio."""
    while True:
        print("\nüìå GERENCIADOR DE TAREFAS")
        print("1Ô∏è‚É£ Adicionar Tarefa")
        print("2Ô∏è‚É£ Listar Tarefas por Prioridade")
        print("3Ô∏è‚É£ Listar Tarefas por Data")
        print("4Ô∏è‚É£ Remover Tarefa")
        print("5Ô∏è‚É£ Visualizar Estat√≠sticas")
        print("6Ô∏è‚É£ Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            adicionar_tarefa()
        elif opcao == "2":
            listar_tarefas_prioridade()
        elif opcao == "3":
            listar_tarefas_date()
        elif opcao == "4":
            remover_tarefa()
        elif opcao == "5":
            visualizar_estatisticas()
        elif opcao == "6":
            print("Saindo...")
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida. Tente novamente.")


# Inicia o programa
menu()
