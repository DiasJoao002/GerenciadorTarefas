# Importa√ß√£o de bibliotecas necess√°rias
import os  # Para verificar a exist√™ncia do arquivo
import json  # Para salvar as tarefas em formato estruturado

# Nome do arquivo onde as tarefas ser√£o armazenadas
arquivo_tarefas = "tarefas.json"

# Dicion√°rio que mapeia n√≠veis de prioridade e n√∫meros para ordena√ß√£o
prioridades = {
    "Alta": 3,
    "M√©dia": 2,
    "Baixa": 1
}

# Tupla com op√ß√µes v√°lidas de prioridade
opcoes_prioridade = ("Alta", "M√©dia", "Baixa")

def carregar_tarefas():
    """Carrega as tarefas salvas no arquivo JSON."""
    # Verifica se o arquivo de tarefas existe
    if not os.path.exists(arquivo_tarefas):
        return []  # Retorna uma lista vazia se o arquivo n√£o existir
    # Abre o arquivo e carrega as tarefas em formato JSON
    with open(arquivo_tarefas, "r", encoding="utf-8") as file:
        return json.load(file)  # Retorna a lista de tarefas

def salvar_tarefas(tarefas):
    """Salva a lista de tarefas no arquivo JSON."""
    # Abre o arquivo para escrita e salva as tarefas em formato JSON
    with open(arquivo_tarefas, "w", encoding="utf-8") as file:
        json.dump(tarefas, file, indent=4, ensure_ascii=False)  # Salva as tarefas com formata√ß√£o

def obter_duracao_tarefa():
    """Solicita ao usu√°rio a dura√ß√£o da tarefa no formato hh:mm."""
    while True:
        duracao = input("Insira a dura√ß√£o da tarefa (hh:mm): ")  # Solicita a dura√ß√£o
        try:
            horas, minutos = map(int, duracao.split(':'))  # Divide a entrada em horas e minutos
            if minutos < 0 or minutos > 59:
                raise ValueError  # Verifica se os minutos est√£o no intervalo v√°lido
            return horas, minutos  # Retorna as horas e minutos
        except ValueError:
            print("‚ö†Ô∏è Formato inv√°lido. Insira a dura√ß√£o no formato hh:mm (ex: 01:30).")  # Mensagem de erro

def adicionar_tarefa():
    """Permite que o usu√°rio adicione uma nova tarefa."""
    descricao = input("Digite a nova tarefa: ")  # Solicita a descri√ß√£o da tarefa

    horas, minutos = obter_duracao_tarefa()  # Obt√©m a dura√ß√£o da tarefa
    duracao_total = horas * 60 + minutos  # Converte a dura√ß√£o total em minutos

    while True:
        prioridade = input("Defina a prioridade (Alta, M√©dia, Baixa): ").capitalize()  # Solicita a prioridade
        if prioridade in opcoes_prioridade:
            break  # Sai do loop se a prioridade for v√°lida
        print("‚ö†Ô∏è Prioridade inv√°lida. Escolha entre: Alta, M√©dia ou Baixa.")  # Mensagem de erro

    tarefas = carregar_tarefas()  # Carrega as tarefas existentes
    nova_tarefa = {
        "descricao": descricao,
        "tempo_estimado": duracao_total,
        "prioridade": prioridade,
    }

    tarefas.append(nova_tarefa)  # Adiciona a nova tarefa √† lista
    salvar_tarefas(tarefas)  # Salva a lista atualizada de tarefas
    print("‚úÖ Tarefa adicionada com sucesso!")  # Mensagem de sucesso
    print(f'Descri√ß√£o: {descricao} || Dura√ß√£o: {duracao_total} min || Prioridade: {prioridade}')  # Exibe detalhes da tarefa

def listar_tarefas_prioridade():
    """Lista todas as tarefas ordenadas por prioridade."""
    tarefas = carregar_tarefas()  # Carrega as tarefas
    if not tarefas:
        print("üìÇ Nenhuma tarefa encontrada.")  # Mensagem se n√£o houver tarefas
        return

    # Ordena as tarefas pela prioridade
    tarefas_ordenadas = sorted(tarefas, key=lambda x: prioridades[x["prioridade"]], reverse=True)
    
    print("\nüìå Lista de Tarefas (Ordenadas por Prioridade):")
    for i, tarefa in enumerate(tarefas_ordenadas, 1):
        # Converte o tempo estimado em horas e minutos
        horas, minutos = divmod(tarefa['tempo_estimado'], 60)  
        print(f"{i}. {tarefa['descricao']} - üïí {horas}h {minutos}m - üî• {tarefa['prioridade']}")  # Exibe a tarefa

def remover_tarefa():
    """Permite que o usu√°rio remova uma tarefa pelo n√∫mero correspondente."""
    tarefas = carregar_tarefas()  # Carrega as tarefas
    listar_tarefas_prioridade()  # Lista as tarefas para o usu√°rio

    if not tarefas:
        return  # Se n√£o houver tarefas, sai da fun√ß√£o

    while True:
        try:
            num_tarefa = int(input("\nDigite o n√∫mero da tarefa a remover: "))  # Solicita o n√∫mero da tarefa
            if 1 <= num_tarefa <= len(tarefas):
                tarefa_removida = tarefas.pop(num_tarefa - 1)  # Remove a tarefa da lista
                salvar_tarefas(tarefas)  # Salva a lista atualizada
                print(f"üóëÔ∏è Tarefa '{tarefa_removida['descricao']}' removida com sucesso!")  # Mensagem de sucesso
                break
            else:
                print("‚ùå N√∫mero inv√°lido. Tente novamente.")  # Mensagem de erro
        except ValueError:
            print("‚ö†Ô∏è Entrada inv√°lida. Digite um n√∫mero v√°lido.")  # Mensagem de erro

def visualizar_estatisticas():
    """Exibe estat√≠sticas sobre as tarefas cadastradas."""
    tarefas = carregar_tarefas()  # Carrega as tarefas
    if not tarefas:
        print("üìä Nenhuma estat√≠stica dispon√≠vel.")  # Mensagem se n√£o houver tarefas
        return
    
    total_tarefas = len(tarefas)  # Conta o total de tarefas
    tempo_total = sum(tarefa["tempo_estimado"] for tarefa in tarefas)  # Soma o tempo total das tarefas
    media = tempo_total / total_tarefas if total_tarefas > 0 else 0  # Calcula a m√©dia de tempo

    print("\nüìä Estat√≠sticas das Tarefas:")
    print(f"üìå Total de tarefas: {total_tarefas}")  # Exibe o total de tarefas
    print(f"üïí Tempo total estimado: {tempo_total // 60}h {tempo_total % 60}m")  # Exibe o tempo total em horas e minutos
    print(f'M√©dia da carga hor√°ria das atividades: {media} minutos')  # Exibe a m√©dia de carga hor√°ria

def menu():
    """Exibe o menu principal e gerencia as op√ß√µes do usu√°rio."""
    while True:
        print("\nüìå GERENCIADOR DE TAREFAS")
        print("1Ô∏è‚É£ Adicionar Tarefa")
        print("2Ô∏è‚É£ Listar Tarefas por Prioridade")
        print("3Ô∏è‚É£ Remover Tarefa")
        print("4Ô∏è‚É£ Visualizar Estat√≠sticas")
        print("5Ô∏è‚É£ Sair")
        opcao = input("Escolha uma op√ß√£o: ")  # Solicita a op√ß√£o do usu√°rio
        if opcao == "1":
            adicionar_tarefa()  # Chama a fun√ß√£o para adicionar tarefa
        elif opcao == "2":
            listar_tarefas_prioridade()  # Chama a fun√ß√£o para listar tarefas
        elif opcao == "3":
            remover_tarefa()  # Chama a fun√ß√£o para remover tarefa
        elif opcao == "4":
            visualizar_estatisticas()  # Chama a fun√ß√£o para visualizar estat√≠sticas
        elif opcao == "5":
            print("Saindo...")  # Mensagem de sa√≠da
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida. Tente novamente.")  # Mensagem de erro

# Chama o menu
menu()
